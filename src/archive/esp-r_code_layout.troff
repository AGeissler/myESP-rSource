.\"#### Macros to use in displaying fortran code in tables ####
.de ML        \"macro to start code listing
.LD           \" Left-justified "display" (avoids need of ".br" after each line)
.vs 9
.ps 8
.fam C
..
.de ES        \"macro to end code listing
.DE           \" Ends "display" commenced with ".LD".
.fam T
..
.EQ
delim $$
.EN
.TL
ESP-r Common Coding Resources
.AU
by Jon Hand
Energy Systems Research Unit
of the University of Strathclyde
Version of 22 March 2009
.sp 2
.SH
Summary
.LP
The source code distribution of ESP-r contains many resources
for the development community.  Those wishing to understand the
existing functions and subroutines within the Fortran, C
and C++ code base can browse this document for the API which
their code must interact with. It should also be possible to
use this reference to understand the structure of the code
and the dependencies within the code distribution.
.LP
Documentation of source code tends to lag the evolution of
the code and readers are advised to also review the source
code. As the ESP-r distribution is under source code
control (via subversion), it is hoped that this document will
be updated as the source code evolves.
.LP
The source code of ESP-r is subdivided into a number of
topic-focused folders. Each of the folders separates the 
source files by functional task, data structure and/or 
analysis domain. There is a rough order within the
roughly million lines of code. There are chaotic corners 
which have yet to be consolidated and there is some
duplication which awaits consolidation.
.LP
Below is the overall layout of the source distribution
along with notes on the contents of each folder:
.ML

.
|-- src
|   |-- archive     documents for developers
|   |-- bin         scripts for developers and users
|   |-- bitmaps     images used by X11 version
|   |-- cetc        code from Natural Resources Canada and XML
|   |-- climate     climate data sets (ASCII versions)
|   |-- databases   materials, optics, constructions, plant components
|   |-- env         example Unix/Linux dot files
|   |-- esruXXX     ESP-r module specific source code 
|   |-- esrucom     ESP-r common source code 
   ...
|   |-- include     header files used for Fortran and C code
|   |-- lib         library code and user interface code
|   |-- manual      documentation about ESP-r and operating system variants
|   |-- shocc       library of occupant preferences
|   |-- training    example models for use in workshops and training
|   |-- tutorial    holds additional contextual help text for interfaces
|   `-- validation  models for use in formal validation e.g. BESTEST
`-- tester
    |-- additional_tests   infrequently used automated test models
    |-- scripts            scripts for running automated tests
    `-- test_suite         test models for automated tests

.ES
.LP
One key aspect of source code evolution is testing
of changes and the tester folder includes a number
of scripts to automate the process and over 170 
test models to be run as part of the formal testing
process. The tester folder are listed below:
.ML

tester
|-- additional_tests
|   |-- A42_combustion_cogen_comp_tests
|   |-- A42_fuel_cell_comp_tests
|   |-- ASHRAE-140
|   `-- HOT3000_test_cases
|-- scripts
`-- test_suite
    |-- Annex42_fuel_cell
    |-- alberta_infil_model
    |-- ascii_dbs
    |-- basesimp
    |-- bld_PV
    |-- bld_ground_reflectivity
    |-- bld_hc_ISO15099
    |-- ccht_benchmark
    |-- cellular_offices
    |-- cetc_battery_model
    |-- elec_gain_into_zone
    |-- esru_benchmark_model
    |-- h3kreports
    |-- idealized_hvac
    |-- multi_year_simulations
    |-- plt_SDHW
    |-- plt_adsorption_storage
    |-- plt_boundary_conditions
    |-- plt_elec_net
    |-- plt_electric_HWT
    |-- plt_lookup_table
    |-- plt_pre_A42_PEMFC_model
    |-- plt_pre_A42_SOFC_model
    |-- plt_radiant_floor
    |-- plt_solar_collector
    |-- plt_trnsys_wrapper
    |-- plt_zone_heat_gain_coupling
    `-- pv_example

.ES
.LP
The validation of ESP-r is also supported by a number of standard
test models and scripts in the validation folder.
.ML

src
`-- validation
    |-- BESTEST
    |   |-- 195    test solid conduction
    |   |-- 200    test long wave radiation exchange at windows
    |   |-- 210    test long wave radiation external exchange on
    |   |-- 215    test long wave radiation external exchange off
    |   |-- 220    test long wave radiation internal exchange
    |   |-- 230    test infiltration
    |   |-- 240    test internal gains
    |   |-- 250    test exterior solar
    |   |-- 270    test south exterior solar
    |   |-- 280    test cavity albedo
    |   |-- 290    test south horizontal overhang
    |   |-- 300    test east and west external solar
    |   |-- 310    test east and west overhang and fins
    |   |-- 320    test thermostat deadband
    |   |-- 395    test solid conduction
    |   |-- 400    test surface convection and long-wave exchange
    |   |-- 410    test infiltration
    |   |-- 420    test internal heat generation
    |   |-- 430    test external solar incident
    |   |-- 440    test internal solar absorptance
    |   |-- 600    test south solar transmission
    |   |-- 600FF
    |   |-- 610    test south overhang
    |   |-- 620    test east and west solar transmission
    |   |-- 630    test east and west overhangs and fins
    |   |-- 640    test night setback
    |   |-- 650    test venting
    |   |-- 650FF
    |   |-- 800    test thermal mass with no solar
    |   |-- 810    test thermal mass with solar
    |   |-- 900    test thermal mass and solar interaction
    |   |-- 900FF
    |   |-- 910    test south overhang and thermal mass
    |   |-- 920    test east and west mass and solar interaction
    |   |-- 930    test east and west shading and mass interaction
    |   |-- 940    test night setback and mass interaction
    |   |-- 950    test venting and mass interaction
    |   |-- 950FF
    |   |-- 960    test test passive inter-zone transfer
    |   |-- 990
    |   |-- climate     climate files for use with BESTEST
    |   `-- dbs         databases for use with BESTEST
    |-- CEN
    |   |-- 13791
    |   `-- 15265
    |-- analytical
    |   `-- conduction01
    `-- benchmark
        |-- CFD
        |   |-- Archive_Feb2004    archive of standard assessments
        |   `-- Models             models for testing CFD
        `-- QA
            |-- Archive_linux_X11_040309
            |-- Archive_linux_X11_230209   archive of earlier predictions
            |-- benchmark_model     a set of archaic test models
            |-- model         test models with older geometry format
            `-- model_1.1     test models with new geometry format

.ES
.LP
The documentation associated with ESp-r is found in the
manual and the archive folders.
.ML

src
|-- manual
|   |-- Adding_features
|   |-- Data_model           formal description of the ESP-r data model
|   |-- ESRUlib              notes about library subroutines (out-of-date)
|   |-- Implement
|   |-- Manual               text for the manual (out-of-date)
|   |   `-- Figs             files for figures to the manual
|   `-- OS
|       |-- Apple            instructions for OSX install
|       |-- Cygwin           instructions for Cygwin install
|       |-- Linux            instructions for Linux install
|       `-- Native_windows   instructions for Native Windows install
.ES
.LP
There are a number of example models for use with training
workshops and courses and these are located in the training
folder structure.
.ML

src
|-- training
|   |-- 3_windows         model with different flow network window representations
|   |-- CFD_room          model with CFD domain
|   |-- acoustic
|   |   `-- EOS_atrium    model including acoustic calculations
|   |-- basic             a simple model with numerous variants
|   |-- burdie            a house with moisture issues
|   |-- cellular_bc       base case version of two cellular offices
|   |-- cellular_bound    cellular offices with upper and lower bounding zones
|   |-- cellular_contam   cellular offices with contaminate tracking
|   |-- cellular_cvvt     cellular offices with idealized CV air supply
|   |-- cellular_earth    cellular offices with earth tube air supply
|   |-- cellular_flh      cellular offices with floor heating
|   |-- cellular_furn     cellular offices with furniture and internal mass
|   |-- cellular_hires    cellular offices with higher resolution geometry
|   |-- cellular_hvac     cellular offices with HVAC
|   |-- cellular_hybrid   cellular offices with hybrid ventilation
|   |-- cellular_natv     cellular offices with operated windows
|   |-- cellular_pv       cellular offices with PV embedded in facade
|   |-- cellular_shd      cellular offices with shading obstructions
|   |-- cfd
|   |   |-- IEA_A20       IEA Annex 20 models
|   |   |-- M_Age         model including mean age of air
|   |   |-- RoomVent98    models used for RoomVent 1998 paper
|   |   |-- displ_vent    models demonstrating displacement ventilation
|   |   `-- rad_htg       model with radiant heating
|   |-- cg_ctl
|   |   |-- coupling      coupling of ESp-r and Radiance
|   |   |-- daylit_coef   model using Radiance daylight coefficients
|   |   |-- el_chrom      model with electro chromic optical controls
|   |   `-- static
|   |-- chp
|   |   |-- sport_cen     model of sports centre with co-generation
|   |   `-- unit
|   |-- constr
|   |   |-- adapt         model with adaptive thermophysical properties
|   |   `-- tp_sub
|   |-- el_chr_ctl        model with electro chromic optical controls
|   |-- flow              model demonstrating network flow
|   |-- gridding          model with 2D conduction gridding
|   |-- house
|   |   |-- sun_space     house with a sun space
|   |   `-- svph          house with a sun space and solar ventilation preheating
|   |-- mould             model which includes mico-toxin parameters
|   |-- network           model with network flows
|   |-- office            a portion of an office building
|   |-- office_dfs        a portion of an office building with a double facade
|   |-- office_vent       a portion of an office building with controlled facade vent
|   |-- pattern           a folder with sample operation files
|   |-- pid               a model for demonstrating PID controls
|   |-- plant
|   |   |-- ac_pp           a model with primitive part representations of air conditioning
|   |   |-- ahu             a model with air handler plant components
|   |   |-- coil_pp         primitive part representation of a fan coil
|   |   |-- conv_ac_sys
|   |   |-- hvac_bas
|   |   |-- hvac_vav        VAV system represented by plant components
|   |   |-- mixed_ac_sys
|   |   |-- solar           a model with various solar components
|   |   |-- vent_detailed   a model with detailed mechanical ventilation
|   |   |-- vent_simple     a model with simple mechanical ventilation
|   |   `-- wch             a model with web central heating
|   |-- pv_facade           research facility with PV embedded facade
|   |-- simple              a single zone model with variants
|   `-- sunroom
|

.ES
.SH
High level goals
.LP
ESP-r is a mixed language environment. Essentially the
data model and the decision about what to present to
the user and how to interpret user actions is
handled in the Fortran source. The C code in lib implements
the directives about what to display and captures and passes
back user actions (mouse movements and keystrokes). The goal
is for the code in the application source folders to be 
substantially isolated from the underlying graphic API via the use of
intermediate code in the lib folder. There are a few exceptions
to this goal and the code relies on very few #ifdef statements
and direct calls to the underlying graphic APIs.
.LP
The source code and databases are held in
the src folder structure as shown below
.ML

src
|-- archive     documents for developers
|-- bin         scripts for developers and users
|-- bitmaps     images used by X11 version
|-- cetc        code from Natural Resources Canada
|   `-- h3kreports  XML report generation code
|       |-- Debug
|       `-- xsl
|-- climate     climate data sets (ASCII versions)
|-- databases   materials, optics, constructions, plant components
|   `-- UK_NCM  patterns of occupancy used in UK national calculation method
|-- env         example Unix/Linux dot files
|-- esruaco     source code specific to the acoustics module
|-- esrub2e     source code specific to BEMS import module
|-- esrubld     source code for zone solver
|-- esrubps     source code for the multi-domain solver
|-- esruc2e     source code for air flow pressure coefficients
|-- esruclm     source code for the clm module
|-- esrucnv     source code for importing and exporting to 3rd party tools
|-- esrucom     common code used by various modules
|-- esructl     source code for global controllers
|-- esrudbm     source code for generic databases
|   `-- db      sample generic databases
|-- esrudfs     source code for the CFD solver and gridding setup
|   `-- Info
|-- esrue2r     source code for interface to Radiance
|-- esrueco     source code for environmental impacts module
|-- esrugrd     source code for 2D and 3D gridding
|-- esruish     source code for shading and insolation pre-calculator
|-- esrumfs     source code for mass flow networks
|-- esrumld     source code for mico-toxin assessments
|-- esrumrt     source code for surface-to-surface viewfactors
|-- esrunet     source code for an iconic network sketch module
|-- esrupdb     source code for the plant template library manager
|-- esrupdf     source code for electrical network manager
|-- esrupfs     source code for electrical network solver 
|-- esruplt     source code for plant component solver
|-- esruprj     source code for the project manager module
|-- esrures     source code for the results analysis module
|-- esrurun     source code for converting 3rd party descriptions into ESP-r models
|-- esruvew     source code for a hidden line wire-frame viewer
|-- esruvld     source code for validation and uncertainty studies
|-- esruvww     repository for archaic code
|-- include     header files for fortran and c code
|-- lib         library code and user interface code      
|-- shocc       library of occupant preferences
|-- tutorial    holds additional contextual help text for interfaces

.ES
.bp
.SH
The ESP-r API
.LP
Having reviewed the overall layout of the ESP-r distribution
we now turn to the details of the API.  For each of the folders
we will review the source files and the subroutines and/or functions
they hold. This section will focus on high level descriptions
and the Appendices will provide the full API.
.SH
The lib folder
.LP
The src/lib folder contains source code blocks that are so widely
used that it makes sense to compile them into libraries. Included
in this folder are a number of Fortran code blocks that act as
wrappers around the calls to the low level user interaction
API. The lib folder also includes the C source code related to the 
interfaces (X11 or GTK or pure-text) of ESP-r. 
.LP
Because ESP-r modules can be compiled for the GTK API, the X11 API 
and as a pure-text API there is a subdivision of the source code in 
the lib folder. 
.IP "esru_lib.F" 5
Code which is independent of the choice of graphic library tends 
to be held in esru_lib.F and this is included in all variants
of the library linked with the ESP-r application.
.IP "esru_libGTK.F" 5
Fortran code which provides an interface to the underlying GTK API is found
in esru_libGTK.F. In some cases there are differences in the number of
parameters of the C function, in other cases there are different C functions
which are called to carry out a specific task. The C source used by
esru_libGTK.F is esp-r.c esp_menu.c esp_text.c esp_ask.c esp_draw.c and exp_file.c
.IP "esru_libNonGTK.F" 5
Fortran code which provides an interface to either the pure-text or X11
API are found in esru_libNonGTK.F. There is a close match in the
names of the Fortran subroutines in esru_libNonGTK.F and esru_libGTK.F
but their details have been adjusted to the requirements of the
specific API they are dealing with (esru_x.c or esru_nox.c). 
.IP "esru_libX11.F" 5
This small source file provides a few wrappers which are needed for
X11 specific API and primarily calls esru_x.c.
.IP "esru_ask.F" 5
ESP-r modules include context sensitive help and for each module
there is a block of text which is held in esru_ask.F which provides
a high level description of the module. 
.IP "esru_blk.F" 5
ESP-r code makes use of Fortran common blocks and a number of these
are initialized in the file esru_blk.F. This is roughly equivalent
to the intent of the Fortran BLOCKDATA statement.
.IP "esru_fc.f" 5
Pure-text versions of ESP-r have no need for the graphic API calls
and also have almost no need for C code. The file esru_fc.f provides
dummy Fortran subroutines with the same names and parameter types
as the X11 API wrappers.
.IP "libXML.a" 5
One option for ESP-r is to generate XML reports of building and system
performance predictions. This is handled by C++ code in the cetc/h3kreports
source folder.
.LP
Conceptually, if the ESP-r community decided to support another graphic 
API, this would be  accomplished by creating another source file 
esru_libXXX.F to provide the intermediate wrappers.
.sp
.SH
Summary of functions
.LP
The list below is a summary of the contents of each of the source files
in the lib folder.  The full parameter list for these subroutines and
functions can be found in Appendix A.
.SH
esru_ask.F
.ML
C   cpwpk()     Displays a copyright notice via help text data structure.
C   askabout()  Creates text for a pop-up notice for each module.
.ES
.SH
esru_blk.F
.ML
C ezero()       Loads the COMMONS used by libgtkesru.a, libxesru.a and libnoxesru.a.

.ES
.SH
esru_lib.F
.LP
The file esru_lib.f is a collection of low-level ESP-r fortran
libraries that are applicable to all versions of ESP-r (that is,
X11, GTK and noX). Code pertaining to version-specific configurations
should be placed in the libGTK, libX11 and libNONGtk files.
.ML

C  st2name: Given `string' swap blanks & wildcards to _ return as `name'.
C  st2file: Given `string' strip blanks & wildcards and return as `name'.
C  backslashit: Given `string' swap / to \ : return as `name'.
C  iprevblnk: Given a string, return position of blank just before ipos.
C  inextblnk: Given a string, return position of blank just after ipos.
C  icutstr: Given a string, cuts icut characters from position ipos.
C  EASKAB:  Generic A/B choice facility returning 1 or 2 according to which
C           of the choices has been chosen.
C  EASKABC: Generic A/B/C choice facility returning 1, 2 or 3 according
C           to which of the choices has been chosen.
C  EASKABCD: Generic A/B/C/D choice facility returning 1-4 according
C           to which of the choices has been chosen.

C  isadll:  Checks if module is being used as a dll (silent running).
C  isunix:  Checks if machine type is Unix or NT.
C  usrhome: Returns user's home directory.
C  usrname: Returns user's login name.
C  usrdir:  Returns user's current directory.
C  esppid:  Find current process number.
C  tstamp:  Date stamp with message.
C  dstamp:  Get date stamp in the form: Fri Jan 23 09:34:31 1998.
C  comparedate: is passed two date strings (generated by call to dstamp)
C    and returns 1 if first date is more current, 0 if the same, otherwise -1.
C  getsecs: Get computer clock seconds.

C  iEGetArrW: integer function that breaks a string into an array.

C  DAYCLK:  Print day, month, day no. and time based on the julian day & time.
C  FDROOT:  Given a file name see if it contains a path.
C  EFOPSEQ: Open a sequential file with existance flag & path check.
C  EFOPRAN: Open a random access file with existance flag & path check.
C  ADDPATH: Return file name appended onto the path and logical concat.
C  GETTOKENS checks a string, returning nb of tokens and array of tokens.
C  C2FSTR:  Convert c function returned string to fortran format.
C  EKPAGE:  Maps key characters, pages & array indexs in long display lists.
C  KEYIND:  Decodes EMENU index and returns the array index of the item.
C  EPMENSV: saves menu definitions (common block PMENU).
C  EPMENRC: recovers menu definitions (common block PMENU) from PMENUSV.
C  EPAGE:   Screen control: page without waiting.
C  EPAGEW:  Screen control: Wait before paging.
C  EPWAIT:  Screen control: Wait without paging.
C  EPAGEND: Screen control: Page then close window if open.

C  ang3vtx: Get angle between three vertex.
C  CLOSE3D: Calc min dist between two lines in 3D return dist and closest points.
C  CROW:    Function returns shortest dist between two points P(3) and Q(3).
C  CROWXYZ: Function returns shortest dist between two points Px,Py,Pz and Qx,Qy,Qz.
C  UVXYZ:   Returns Unit vector Ux,Uy,Uz from two points Px,Py,Pz and Qx,Qy,Qz.
C  UVAB:    Returns Unit vector U of vector A.
C  PLNDIS:  Finds distance DIST from a point (x,y,z) to a plane (eq EQN).
C  PLNDANG: Finds dihedral angel between two planes given their equations.
C  AVER:    Returns the centre of gravity of an polygon array.
C  CROSS:   Performs a cross-product on vectors A() & B() returning in C().
C  CROSS2:  Performs a cross-product on vectors passing parameters as ax,ay,az etc.
C  DOT3(a,b,product) Return dot product of two vectors a & b.
C  ZEROS:   Clear a 4x4 array prior to doing viewing transforms.
C  ECLOSE:  Checks tolerance between two real numbers.
C  ESIND:   Function returning SIN of angle where angle is given in degrees.
C  ECOSD:   Function returning COS of angle where angle is given in degrees.
C  ETAND:   Function returning TAN of angle where angle is given in degrees.
C  IFAX :   Integer function returning the integer part of it's argument.
C  EAZALT:  Computes the solar azimuth & altitude angles at current time.
C  AGNXYZ:  Given solar azi & elev return viewing coords @ 1000m.
C  ORTTRN:  Multiplies a point (XM,YM,ZM) by the transform matrix
C           TMAT to return the point XO,YO,Z0.
C  VECTRN:  Transforms a vector VECIN by the 4x4 (homogeneous) matrix
C           TMAT and returns the vector VECOUT.
C  VECPLN:  Returns the point of intersection X,Y,Z between a line
C           defined by X1,Y1,Z1 & X2,Y2,Z2 and a plane defined in PEQN.
C  HMATMUL: Multiplies the homogenous (4x4) matrices A by B returning C.
C  HREVMAT: Takes the homogenous perspective transformation PER and
C           returns it's inverse REP making use of CROUT.
C  CROUT:   Inverts a nonsymetric square matrix A (order N), returning
C           the matrix B and IERR =-1 if matrix is singular.
C  DPACC:   Provides double precision accumulation of inner products for
C           CROUT in the form SUM(+,-)SUM(+,-)AB.
C  EYEMAT:  Provides transform eye-point - viewpoint....

C  INTSTR: Converts integer into string (10 char) w/o leading blanks.
C  RELSTR: Converts a real into a string (12 char) w/o leading blanks.
C  REL16STR: Converts a real into a string (16 char) w/o leading blanks.
C  EXPSTR: Converts a exponential into a string (10 char) w/o leading blanks.
C  ARLIST: takes a real array (rlist) and builds a packed string.
C  AILIST: takes an int array (ilist) and builds a packed string.
C  ASLIST: takes an string array (list*24) and builds a packed string.
C  ASLIST2 takes the range (inst to inil) items of an string array (list)
C  ASFLIST: takes an string array (list*48) and builds a packed string.
C  STRIPC: Strips comments from a ASCII file str (124 char) & returns data.
C  LSTRIPC: Strips comments from a ASCII file str (248 char) & returns data.
C  STRIPC400 strips comments from a ASCII file (400 char long) string and returns the data.
C  CHITMS: Checks a character string & returns the number of data items.
C  LCHITMS Checks a (248) character string (A), returning the number of data
C  CHITMS400: Checks a (400) character string & returns the number of data items.
C  CHARCH: Routine to check a string for a specific number of data items.
C  NOYES:  INTEGER FUNCTION to read the answer Y,y,1,N,n,0 to a question.
C  IFIRST: Function returning ASCII value for 1st char in a string ISTR.

C  EDAY:   Returns the year day number when passed the day of month & month.
C  EDAYR: returns the day and month numbers from the day-of-year.
C  EWEEKD: returns the day of the week given the day of month, month
C          and year as integers.
C  EDAYCH: Checks for errors in the users specification of the day & month.
C  DATTIM: returns UNIX time via a string in the form : 16 Sep 73 14:23.
C  STDATE: Takes the day of year and returns two descriptive strings:
C          DESCR takes the form '12 Jan' & DESCR1 takes the form 'Fri 12 Jan'.
C  ESTIME: Takes an integer time-step and returns two string descriptions:
C          DESCRH in the form '12h28' & DESCRD which takes the form of 12.46.
C  EDTIME: takes an real time and returns two string descriptions:
C          DESCRH in the form '12h28' and DESCRD which takes the form of 12.46,
C  EPERSTR: creates three strings representing the start and
C           stop time of a diary period.

C  EGETW:  Finds first word after pos k in a string (' ' ',' '|' or tab separated).
C  EGETP:  Finds first phrase after pos k in a string (delimiter separated).
C  EGETDQ:  Finds first quoted phrase after pos k in a string (delimeter separated).
C  EGETWI: As EGETW for an integer with range checking & error messages.
C  EGETWR: As EGETW for a real with range checking & error messages.
C  EGETWRA: Recovers (IRVA) reals of real array (RVA) from an ASCII file.
C  EGETWIA: Recovers (IRVA) int of array (IVA) from an ASCII file.
C EGETAGWIA recovers (IRVA) integers of integer array (IVA) from a string
C   TSTR (from position K) and if TSTR does not hold all of the array then
C   it continues reading from an ASCII file (unit IAF) reading as
C   many lines as necessary to recover the data.
C EGETAGWRA recovers (IRVA) reals of real array (RVA) from a string
C   TSTR (from position K) and if TSTR does not hold all of the array then
C   it continues reading from an ASCII file (unit IAF) reading as
C   many lines as necessary to recover the data.
C EGETAGWSA recovers (ISVA) words into string array (SVA) from a string
C   TSTR (from position K) and if TSTR does not hold all of the array then
C   it continues reading from an ASCII file (unit IAF) reading as
C   many lines as necessary to recover the data
C EGETAGWPA recovers (ISVA) phrases into string array (SVA) from a string
C   TSTR (from position K) and if TSTR does not hold all of the array then
C   it continues reading from an ASCII file (unit IAF) reading as
C   many lines as necessary to recover the data
C  EGETRM: Returns the remainder (RSTR with no leading blanks) from
C          a text string (TSTR) after position k.

C  ERPFREE: Is used to close any file.
C  EFDELET: Delete the current file opened under IUN and return ISTAT.
C  FPOPEN:  is used to open a file with a name.
C  FPRAND:  is used to open a file with a name for random access.

C  SITELL2S: Takes site lat & long and returns descriptive string.
C  SIGFIG:  Returns number to specified number of significant figures.
C  SIpre:   Returns suitable SI prefix for number supplied.
C  pronam:  Returns the characters of a string after the last
C           occurrence of '/' or '\'
C DNOTZERO: Function returns non zero value with the same sign (dbl precision).
C ANOTZERO: Function returns non zero value with the same sign (sngl precision).

C  ASKTIM:  Enquire month and day and time (real for view).
C  SOLAIR:  Returns solair temperature.
C  LISTAS:  General read & display of an ascii file.
C  SHOWMEH: Extracts additional help text matching the key OTHER from
C           an external file
C  SDELIM:  Replaces blanks in a string A with alternative delimiter.
C  EDDISP:  As edisp with text separated with current delimiter.
C EDISP248 Displays a 248 char block of text (text or graphic).
C clrtextbuf: Clears the graphic text buffer common blocks.

C  UPDVIEW: Called from C to pass back updates to common VIEWPX & GFONT
C  WIREPK:  Called from 'C' upon a wireframe control button pick.
C  EPROMPT: Does nothing, for compatibility only.

.ES
.sp
.bp
.SH
Appendix A: Function API
.LP
The list below includes the current (revision XX) of the API for each
of the subroutines and function in the lib folder.
.SH
esru_ask.F
.ML

C cpwpk displays a copyright notice via help text data structure.
C It saves and recover any current contextual help messages.
C The integer parameter il is not used.
      subroutine cpwpk(il)


C The intent of askabout is to have one place for the opening help
C message of each application (and thus support an application independent
C static help menu under GTK).
C If initonly is 1 then only assign the h() array and do not display
C If initonly is 0 save prior h(), update h(), display and re-establish prior.
C module (char *4) identifies the ESP-r module.
      subroutine askabout(module,initonly)

.ES
.SH
esru_blk.F
.ML
C ezero loads the COMMONS used by libgtkesru.a, libxesru.a and libnoxesru.a.
      subroutine EZERO

.ES
.sp
.SH
esru_lib.F
.LP
The file esru_lib.f is a collection of low-level ESP-r fortran
libraries that are applicable to all versions of ESP-r (that is,
X11, GTK and noX). Code pertaining to version-specific configurations
should be placed in the libGTK, libX11 and libNONGtk files.
.ML

C st2name takes `string' swap blanks & wildcards to _ : return as `name'.
      SUBROUTINE st2name(string,name)
      CHARACTER*(*) string,name


C st2file: Given `string' strip blanks & wildcards and return as `name'.
C Useful to check file names.
      SUBROUTINE st2file(string,name)
      CHARACTER*(*) string,name


C backslashit: Given `string' swap / to \ : return as `name'.
      SUBROUTINE backslashit(string,name)
      CHARACTER*(*) string,name


C prevblnk: given a string, return position of blank just before ipos.
      function iprevblnk(string,ipos)
      character*(*) string


C inextblnk: given a string, return position of blank just after ipos
C (or the end of the string if that happens first).
      function inextblnk(string,ipos)
      character*(*) string


C icutstr: given a string, cuts icut characters from position ipos
C and shifts latter portion of the string down icut chars. Returns
C zero if no error.
      function icutstr(string,ipos,icut)
      character*(*) string


C FPOPEN Opens the file with standard parameter conventions for
C IUN, ISTAT, MODE, and IXIST;  FNARG is the file name.
        SUBROUTINE FPOPEN(IUN,ISTAT,MODE,IXIST,FNARG)
        CHARACTER*(*) FNARG


C FPRAND Opens a random access file with name FNARG.
C  LENG determines the record length and type as follows:-
C       <0      -( LENG ) characters per record, ASCII records.
C       =0      128 words per record,   IMAGE   MODE RECORDS
C               (BUFFER COUNT IS FORCED TO 1 TO ENSURE WRITES
C               ARE PERFORMED IN ORDER REQUESTED)
C       >0      (LENG  ) words per record, ff BINARY   records
C IUN,ISTAT, and IXIST are the same as standard conventions.
        SUBROUTINE FPRAND(IUN,ISTAT,LENG,IXIST,FNARG)
        CHARACTER*(*) FNARG


C ERPFREE is used to close any file.
C IUN (integer) is the file unit number
C ISTAT (integer) is its status 0=OK, 1=if IUN was zero.
      SUBROUTINE ERPFREE(IUN,ISTAT)


C EFDELET: Delete file IUN and return ISTAT for compatibility.
C IUN (integer) is the file unit number
C ISTAT (integer) is its status 0=OK, 1=if IUN was zero.
      SUBROUTINE EFDELET(IUN,ISTAT)


C EASKAB Generic choice facility returning 1 or 2 according to which
C of the choices has been chosen.
C MSG1 and MSG2 are prompts (upto 124 char) to be printed.
C AOPT & BOPT are the text strings describing the
C options available, (these should not be too long).
      SUBROUTINE EASKAB(MSG1,MSG2,AOPT,BOPT,IWHICH,NHELP)
      CHARACTER*(*) MSG1,MSG2,AOPT,BOPT


C EASKABC Generic choice facility returning 1, 2 or 3 according to which
C of the choices has been chosen. See EASKATOG for parameter documentation.
      SUBROUTINE EASKABC(MSG1,MSG2,AOPT,BOPT,COPT,IWHICH,NHELP)
      CHARACTER*(*) MSG1,MSG2,AOPT,BOPT,COPT


C EASKABCD Generic choice facility returning 1, 2, 3 or 4 according to which
C of the choices has been chosen. See EASKATOG for parameter documentation.
      SUBROUTINE EASKABCD(MSG1,MSG2,AOPT,BOPT,COPT,DOPT,IWHICH,NHELP)
      CHARACTER*(*) MSG1,MSG2,AOPT,BOPT,COPT,DOPT


C bSPEqual determines if two SP numbers are within machine round-off error.
      logical function bSPEqual(fFloat1, fFloat2)
      real fFloat1, fFloat2


C DAYCLK will print the day, month, day no. and time based on the day
C of the year IYD (integer) and clock time in hours TIME (real) on the
C output channel ITU (integer).
      SUBROUTINE DAYCLK(IYD,TIME,ITU)


C FDROOT: Given a file name (fstring) see if it contains a (path) and a (filen).
C Note: mingw compilers require fstring to be declared length (not *(*).
      SUBROUTINE fdroot(fstring,path,filen)
      COMMON/OUTIN/IUOUT,IUIN
      CHARACTER*(*) path,filen,fstring


C EFOPSEQ: Open a sequential ASCII file (SFILE) and return appropriate
C messages and error status (IEXIST).
C IUN is the file unit number, SFILE is the file name.
C IEXIST is a flag denoting:
C   0 - should exist, no message but error -301 if not.
C   1 - should exist, message & error -301 if not.
C   2 - should not exist, error 300 & message if exists.
C   3 - if exists use otherwise create.
C   4 - if exists ask user before overwriting otherwise create.
C IER is the error status (0 is OK).
C If the path is other than `./' but is not `/usr/esru' then
C concatenate path with sfile.
      SUBROUTINE EFOPSEQ(IUN,SFILE,IEXIST,IER)
      CHARACTER*(*) SFILE


C EFOPRAN: Open a random access file (SFILE) and return appropriate
C messages and error status (IEXIST).
C IUN is the file unit number, SFILE is the file name, IRW is
C record width.  IEXIST is a flag denoting:
C   0 - should exist, no message but error -301 if not.
C   1 - should exist, message & error -301 if not.
C   2 - should not exist, error 300 & message if exists.
C   3 - if exists use otherwise create.
C   4 - if exists ask user before overwriting otherwise create.
C IRW is the record width to use when opening the file.
C IER is the error status (0 is OK).
C If the path is other than `./' but is not `/usr/esru' then
C concatenate path with sfile.
      SUBROUTINE EFOPRAN(IUN,SFILE,IRW,IEXIST,IER)
      CHARACTER*(*) SFILE


C FINDFIL: Check for existance of a file SFILE (with path) & return XST.
C If the path is other than `./' but is not `/usr/esru' then
C concatenate path with sfile before looking.  If file name is
C blank or UNKNOWN then return XST=.FALSE.
      SUBROUTINE FINDFIL(SFILE,XST)
      LOGICAL xst
      CHARACTER SFILE*72


C ADDPATH: Return file name appended onto the path and logical concat.
C IUOUT is the message channel, SFILE is the file name.
C If the path does not begin with '/' or '?:' then
C concatenate path with sfile.
C If path is '  ' or './' do not concatenate
C This version includes cross-platform logic.
      SUBROUTINE addpath(SFILE,tfile,concat)
      LOGICAL concat
      CHARACTER*(*) sfile,tfile


C GETTOKENS checks a character string (A), returning the number of data
C items (IW) separated by a file separator and an array of tokens/words
C (up to 12 32character words returned) that were in the string.
C Useful for parsing file paths.  Note to keep from
C overwriting the string passed, deal with a copy.
      SUBROUTINE GETTOKENS(A,IW,WORDS)
      CHARACTER*(*) A
      CHARACTER*32 WORDS(12)


C c2fstr: converts c function returned string to fortran format.
C Strip off the last character (end of line mark) as well as any
C leading blanks from string returned.
      SUBROUTINE c2fstr(cstr,fstr)
      CHARACTER*(*) cstr,fstr


C termode: given an index `mode` return a terminal text string.
      SUBROUTINE termode(mode,tmode)
      CHARACTER*(*) tmode


C EKPAGE maps key characters, pages & array indexs in long display lists.
C No menu should have more than 26 data selections (plus heading and
C control lines) so that key characters (a-z) for arrays will not be
C repeated. Notes on variables:
C IPACT  : page option, if IPACT= CREATE then only update the common
C          block PMENU, otherwise ask for action to be taken.
      SUBROUTINE EKPAGE(IPACT)


C KEYIND decodes the index INO and returns the array index IA of the item
C displayed and whether INO is within the list.
C MENUL (integer) is the length of the menu.
C INO (integer) is the index passed from the calling code.
C IA (integer) is array index of the data
C INOUT=0 if outside the current menu, =1 if within the menu.
      SUBROUTINE KEYIND(MENUL,INO,IA,INOUT)


C EPMENSV pushes the current state of common block PMENU into common block
C PMENUSV.  Up to 5 levels are maintained.
C This is useful if a second menu is about to be called and
C knowledge of the first is required.  See also EPMENRC which pops the
C information back into common PMENU.
      SUBROUTINE EPMENSV


C EPMENRC recovers menu definitions (common block PMENU) from common
C block PMENUSV.
C This is useful if returning from a second menu.  See also EPMENSV.
      SUBROUTINE EPMENRC


C EPAGE: Screen control: page without waiting.
      SUBROUTINE EPAGE

C EPAGEW: Screen control: Wait before paging.
      SUBROUTINE EPAGEW

C EPWAIT: Screen control: Wait without paging.
      SUBROUTINE EPWAIT

C EPAGEND: Screen control: Page then close window if open.
      SUBROUTINE EPAGEND


C ang3vtx: recover angle between three vertex (i.e. between two lines).
C Angel between lines: finds angle A between two lines'
C given 3 vertex as in:    * 1
C                           a \
C                     3 *------* 2
      SUBROUTINE ang3vtx(x1,y1,z1,x2,y2,z2,x3,y3,z3,ang)


C CLOSE3D - calc min dist between two lines in 3D return dist and
C closest points.
C PA,VA define line A (point and vector), SA is parametric variable at closest point
C PB,VB define line B (point and vector), SB is parametric variable at closest point
C DIST minimum distance between lines - if negative then error
C CA,CB are closest points on two lines (if intersect DIST=0 and CA=CB)
C Theory:
C  At intersection the values of the parametric variables will
C  produce the same x,y,z values.  Two equations are formed and
C  solved (these are easily derived from the parametric form of
C  the line equations but the variable names are used below).
C    SA.VA.VB - SB.VBsq = RHSa
C    SA.VAsq - SB.VA.VB = RHSb
      SUBROUTINE CLOSE3D(PA,VA,SA,PB,VB,SB,DIST,CA,CB)
      DIMENSION PA(3),VA(3),PB(3),VB(3),CA(3),CB(3)


C CROW: Function returning the distance 'as the crow flies'
C between the two points P and Q in X Y Z space.
      FUNCTION CROW(P,Q)
      DIMENSION  P(3), Q(3)


C CROWXYZ: Function returning the distance 'as the crow flies'
C between the two X Y Z points.
      FUNCTION CROWXYZ(PX,PY,PZ,QX,QY,QZ)


C UVXYZ: Subroutine returning Unit vector from two points along a
C line expressed as X Y Z points.
      subroutine UVXYZ(PX,PY,PZ,QX,QY,QZ,UX,UY,UZ)


C UVAB: Subroutine returning Unit normal vector U of vector A.
C ierr (integer) = -1 if vector is very short.
      subroutine UVAB(A,U,ierr)
      dimension A(3),U(3)


C PLNDANG: Finds dihedral angel between two planes given their equations.
      subroutine plndang(aeqn,beqn,dang)
      dimension aeqn(4),beqn(4)


C PLNDIS finds distance DIST from a point (x,y,z) to a plane (eq EQN).
C If DIST=0 then one the plane, if DIST > 0 then point on the side
C of the normal vector, if DIST < 0 then on the opposite side.
      subroutine PLNDIS(EQN,X,Y,Z,DIST)


C AVER returns the centre of gravity CG for an array
C of vertex points PNT with NP points in it.
      SUBROUTINE AVER(MNV,NP,PNT,CG)
      DIMENSION PNT(MNV,3),CG(3)


C CROSS performs a cross-product of two vectors A(X,Y,Z) and B(X,Y,Z),
C and returns the result in C(X,Y,Z).
      SUBROUTINE CROSS(A,B,C)
      DIMENSION A(3),B(3),C(3)


C CROSS2 performs a cross-product of two vectors AX,AY,AZ and BX,BY,BZ,
C and returns the result in CX,CY,CZ.
      subroutine cross2(ax,ay,az, bx,by,bz, cx,cy,cz)


C DOT3: Return dot product of two vectors a & b.
      subroutine dot3(a,b,product)
      dimension a(3),b(3)


C ZEROS Clear a 4x4 array prior to doing viewing transforms.
      SUBROUTINE ZEROS(A)
      DIMENSION A(4,4)


C ECLOSE allows two real numbers R1 & R2 to be checked for closeness
C to a given tolerance TOL and returns CLOSE = .TRUE. or .FALSE.
      SUBROUTINE ECLOSE(R1,R2,TOL,CLOSE)
      LOGICAL CLOSE


C ESIND: Returns SIN of angle where angle is given in degrees.
      FUNCTION ESIND (DEG)


C ECOSD: Returns COS of angel where angle is given in degrees.
      FUNCTION ECOSD (DEG)


C ETAND: Returns TAN of angel where angle is given in degrees.
      FUNCTION ETAND (DEG)


C IFAX is an integer function returning the integer part of it's
C argument truncated towards negative infinity as follows:
C     V        IFAX(V)
C    1.0        1
C     .9        0
C     .1        0
C      0        0
C    -.1       -1
C    -.9       -1
C   -1         -1
C   -1.1       -2
      FUNCTION IFAX(V)


C EAZALT computes the solar azimuth and altitude angles at the current
C time (REAL). The 'ISUNUP' variable determines whether the sun
C is up (=1) or down (=0). The solar angles are computed relative
C to local mean time (e.g. Greenwich is the reference time zone for
C the UK).
      SUBROUTINE EAZALTS(TIMEH,ID,SLAT,SLON,ISUNUP,SAZI1,SALT1)


C AGNXYZ: Given the solar azimuth and elevation return viewing coords
C         at a distance of 1000 metres from origin.
      SUBROUTINE ANGXYZ(YAZI,SALT,X,Y,Z)


C ORTTRN multiplies a point (XM,YM,ZM) by the transform matrix
C TMAT to return the point XO,YO,Z0.  If the points are to close
C together then IER=-1.
      SUBROUTINE ORTTRN(XM,YM,ZM,TMAT,XO,YO,ZO,IERR)
      DIMENSION TMAT(4,4)


C VECTRN transforms a vector VECIN by the 4x4 (homogeneous) matrix TMAT
C and returns the vector VECOUT.  If IERR is < 0 then a fatal error.
      SUBROUTINE VECTRN(VECIN,TMAT,VECOUT,IERR)
      DIMENSION VECIN(3),VECOUT(3),TMAT(4,4)


C VECPLN returns the point of intersection X,Y,Z between a line defined
C by X1,Y1,Z1 & X2,Y2,Z2 and a plane defined in PEQN.
C IERR is -1 if denominator is close to zero or negative.
C IERR is 0 if no problem found.
      SUBROUTINE  VECPLN(X1,Y1,Z1,X2,Y2,Z2,PEQN,X,Y,Z,IERR)
      DIMENSION  PEQN(4)


C HMATMUL multiplies the homogenous (4x4) matrices A by B returning C.
C Matrix A is premultiplied and matrix B is postmultiplied.
      SUBROUTINE HMATMUL(A,B,C)
      DIMENSION A(4,4),B(4,4),C(4,4)


C HREVMAT takes the homogenous perspective transformation PER and
C returns it's inverse REP making use of CROUT.
      SUBROUTINE HREVMAT(PER,REP,IERR)
      DIMENSION PER(4,4),REP(4,4),A(4,4),WS(4)


C ******************** CROUT
C CROUT inverts a nonsymetric square matrix A (order N), returning
C the matrix B and IERR =-1 if matrix is singular.
C WS is a workspace vector of dimension N, IA is the
C first dimension of A and IB is the second dimension.
C based on crout factorization based on code from
C Alan Bridges and Wilkinson and Reinsch 'Linear Algebra'
C Springer Verlag, 1971, PP 93-110
      SUBROUTINE CROUT(A,N,WS,B,IA,IB,IER)
      DIMENSION A(IA,N),B(IB,N),WS(N)


C DPACC provides double precision accumulation of inner products for
C CROUT in the form SUM(+,-)SUM(+,-)AB.
C A is the vector on left, I & J numerical identifiers of first two
C elements of A in the multiplication and IJ is the dimension of A.
C For vector B the parameters K,L,KL are analogous to I,J,IJ.
C X is the quantity to be added to the product of the specified
C elements of vectors A & B.
C SUM is the result, N is a counter, IND is an indicator as follows:
C   IF IND=1 SUM=AB+X
C   IF IND=2 SUM=X-AB
C   IF IND=3 SUM=AB-X
C   IF IND=4 SUM=-AB-X = -(AB+X)
      SUBROUTINE DPACC(A,I,J,IJ,B,K,L,KL,X,SUM,N,IND)
      DIMENSION A(IJ),B(KL)


C EYEMAT provides transform eye-point - viewpoint....
      SUBROUTINE EYEMAT(EP,VP,SCALE,TMAT,RMAT)
      DIMENSION  EP(3),VP(3),TMAT(4,4),RMAT(4,4)


C INTSTR converts an integer into a string (10 char long) with no
C leading blanks. ISWD is the length of the resulting string.
      SUBROUTINE INTSTR(INTIN,FSTR,ISWD,IFLAG)
      CHARACTER*10 CSTR, FSTR


C RELSTR converts a real into a string (12 char) with no leading
C blanks. ISWD is the actual length of the resulting string. Takes
C the magnitude of the number into account.
      SUBROUTINE RELSTR(RELIN,FSTR,ISWD,IFLAG)
      CHARACTER*12 CSTR, FSTR


C REL16STR converts a real into a string (16 char) with no leading
C blanks. ISWD is the actual length of the resulting string. Takes
C the magnitude of the number into account.
      SUBROUTINE REL16STR(RELIN,FSTR,ISWD,IFLAG)
      CHARACTER*16 CSTR, FSTR


C EXPSTR converts a exponential into a string (10 char) with no leading
C blanks. ISWD is the actual length of the resulting string.
      SUBROUTINE EXPSTR(RELIN,FSTR,ISWD,IFLAG)
      CHARACTER*10 CSTR, FSTR


C ARLIST takes the first (inst to inrl) items of a real array (rlist)
C of array size (inrs) and builds a packed string (pckstr)
C and returns pckstr and the actual character width (length). If itrunc
C is zero then all items written, else the index of the last item
C which was written. Delm is delimeter between items.
      SUBROUTINE ARLIST(inst,inrl,rlist,inrs,delm,pckstr,length,itrunc)
      dimension rlist(inrs)
      character*(*) pckstr


C AILIST takes the range (inst to inil) items of an integer array (ilist)
C of array size (inisz) and builds a packed string (pckstr) and
C returns pckstr and written character width (length). If itrunc
C is zero then all items written, else the index of the last item
C which was written. Delm is delimeter between items.
      SUBROUTINE AILIST(inst,inil,ilist,inisz,delm,pckstr,length,itrunc)
      dimension ilist(inisz)
      character*(*) pckstr


C ASLIST takes the range (inst to inil) items of an string array (list)
C of array size (inisz) and builds a packed string (pckstr) and
C returns pckstr and written character width (length). If itrunc
C is zero then all items written, else the index of the last item
C which was written. Delm is delimeter between items. It is assumed
C that each string array item is less than 32 characters wide.
      SUBROUTINE ASLIST(inst,inil,list,inisz,delm,pckstr,length,itrunc)
      dimension list(inisz)
      character*(*) pckstr,list
      CHARACTER delm*1


C ASLIST2 takes the range (inst to inil) items of an string array (list)
C of 2_dimensional array size (inisz,inisz2) and builds a packed string
C (pckstr) of the row (inirw) and
C returns pckstr and written character width (length). If itrunc
C is zero then all items written, else the index of the last item
C which was written. Delm is delimeter between items. It is assumed
C that each string array item is less than 24 characters wide.
      SUBROUTINE ASLIST2(inst,inil,list,inisz,inisz2,inirw,
     &                   delm,pckstr,length,itrunc)
      dimension list(inisz,inisz2)
      character*(*) pckstr,list
      CHARACTER delm*1


C ASFLIST takes the range (inst to inil) items of an string array (list)
C of array size (inisz) and builds a packed string (pckstr) and
C returns pckstr and written character width (length). If itrunc
C is zero then all items written, else the index of the last item
C which was written. Delm is delimeter between items. It is assumed
C that each string array item is less than 48 characters wide.
      SUBROUTINE ASFLIST(inst,inil,list,inisz,delm,pckstr,length,itrunc)
      dimension list(inisz)
      character*(*) pckstr,list
      CHARACTER delm*1


C STRIPC strips comments from a ASCII file string and returns the data.
C It assumes that if a string begins with a '#' then the whole line is
C a comment an the next line is read.  If a ' #' is discovered within
C a line the rest of the line is removed.
C IER=0 if ok. MSG is a text string used in error messages. If
C IR=0 then acts silently, otherwise notes when EOF found.
C IEXP is the number of expected items in the line:
C   IEXP = 0 means don't care or already know no. items - don't check
C   IEXP >0  means a specific number of items expected (error if not)
C   IEXP = 99 check number of items and return in ITEMS
      SUBROUTINE STRIPC(INPCH,OUTSTR,IEXP,ITEMS,IR,MSG,IER)
      CHARACTER*124 OUTSTR
      CHARACTER*(*) MSG


C LSTRIPC strips comments from a ASCII file (long) string and returns the data.
C It assumes that if a string begins with a '#' then the whole line is
C a comment an the next line is read.  If a ' #' is discovered within
C a line the rest of the line is removed.
C IER=0 if ok. MSG is a text string used in error messages. If
C IR=0 then acts silently, otherwise notes when EOF found.
C IEXP is the number of expected items in the line:
C   IEXP = 0 means don't care or already know no. items - don't check
C   IEXP >0  means a specific number of items expected (error if not)
C   IEXP = 99 check number of items and return in ITEMS
      SUBROUTINE LSTRIPC(INPCH,OUTSTR,IEXP,ITEMS,IR,MSG,IER)
      CHARACTER*248 OUTSTR
      CHARACTER*(*) MSG


C STRIPC400 strips comments from a ASCII file (400 char long) string and returns the data.
C It assumes that if a string begins with a '#' then the whole line is
C a comment an the next line is read.  If a ' #' is discovered within
C a line the rest of the line is removed.
C IER=0 if ok. MSG is a text string used in error messages. If
C IR=0 then acts silently, otherwise notes when EOF found.
C IEXP is the number of expected items in the line:
C   IEXP = 0 means don't care or already know no. items - don't check
C   IEXP >0  means a specific number of items expected (error if not)
C   IEXP = 99 check number of items and return in ITEMS
      SUBROUTINE STRIPC400(INPCH,OUTSTR,IEXP,ITEMS,IR,MSG,IER)
      CHARACTER*400 OUTSTR
      CHARACTER*(*) MSG


C CHITMS checks a character string (A), returning the number of data
C items (IW) separated by ' ' tab or ','.  Note to keep from
C overwriting the string passed, deal with a copy.
      SUBROUTINE CHITMS(A,IW)
      CHARACTER*(*) A


C LCHITMS checks a long character string (A), returning the number of data
C items (IW) separated by ' ' tab or ',' or '|'.  Note to keep from
C overwriting the string passed, deal with a copy.
      SUBROUTINE LCHITMS(A,IW)
      CHARACTER*(*) A


C CHITMS400 checks a 400 long char string (A), returning the number of data
C items (IW) separated by ' ' tab or ',' or '|'.  Note to keep from
C overwriting the string passed, deal with a copy.
      SUBROUTINE CHITMS400(A,IW)
      CHARACTER*(*) A


C CHARCH: Older routine to check a string for a number of data items.
C This is an older version of CHITMS, however it modifies the string A.
      SUBROUTINE CHARCH(A,ND,IERR)
      CHARACTER*72 A


C NOYES is an INTEGER FUNCTION which is used to read the answer to a
C question.  A line is read from the user, and the value of the
C function is as follows:-
C   1 The answer was '1', ' Y', or '  YES'
C   0 The answer was '0', ' N', or '  NO'
C  -1 otherwise.
      FUNCTION NOYES(J)


C IFIRST: Returns the ASCII value for the first character in
C a string ISTR.
      FUNCTION IFIRST(ISTR)
      CHARACTER*(*) ISTR


C EDAY Returns year day number IYDN when passed the day of the month
C IDAYN and the month number IMTHN. 1st Jan= 1, 31st Dec=365, no leap
C years considered.
      SUBROUTINE EDAY(IDAYN,IMTHN,IYDN)


C 'EDAYR' returns the day and month numbers from the day-of-year where:
C day-of-year 1 = 1st January and day-of-year 365 = 31st December.
C NO LEAP YEARS ARE CONSIDERED!
      SUBROUTINE EDAYR(IYDN,IDAYN,IMTHN)


C 'EWEEKD' returns the day of the week (IDAY) given the day of month, month
C and year (ND,NM,NY) as integers.
C MON=1, TUE=2, WED=3, THU=4, FRI=5, SAT=6 AND SUN=7.
      SUBROUTINE EWEEKD(ND,NM,NY,IDAY)


C EDAYCH will check for errors in the users specification of the day and
C month under consideration.
C IERR set to 1 if ID or IM are outwith the allowable range.
      SUBROUTINE EDAYCH(ID,IM,IERR)


C DATTIM returns UNIX time via a string in the form : 16 Sep 73 14:23.
      SUBROUTINE DATTIM(DT)
      CHARACTER*(*) DT


C STDATE takes the day of year and returns two descriptive strings.
C DESCR takes the form '12-Jan' and DESCR1 takes the form 'Fri-12-Jan'.
      SUBROUTINE STDATE(IYEAR,IDOY,DESCR,DESCR1)
      CHARACTER DESCR*7,DESCR1*10


C ESTIME takes an integer timestep and returns two string descriptions:
C DESCRH in the form '12h28' and DESCRD which takes the form of 12.46,
C As well as the time as a fraction of a day TIMER.
C STIME takes timestep averaging IDAVER into account ie. 0=averaging,
C 1=no averaging. NTS is the number of timesteps per hour.
      SUBROUTINE ESTIME(NTS,IDAVER,ITIME,DESCRH,DESCRD,TIMER)
      CHARACTER*5 DESCRH, DESCRD


C EDTIME takes an real time and returns two string descriptions:
C DESCRH in the form '12h28' and DESCRD which takes the form of 12.46,
C As well as the time as a fraction of a day TIMER.
      SUBROUTINE EDTIME(TIME,DESCRH,DESCRD,TIMER)
      CHARACTER*5 DESCRH, DESCRD


C EPERSTR creates three strings representing the start and stop
C time of a diary period based on the preferred time & date
C display format.
C IFDAY  0 gives 'DOY 10', 1 gives '10 Jan', 2 gives 'Fri 10 Jan'
C IFTIME 0 gives '10h30', 1 gives '10.50', 2 gives '0.4375'
C PERST1 (14 char) is:' 10h00  15h30 ',' 10.00  15.50 ',' 0.4375 0.6458'
C PERST3 (44 char):
C if IFDAY=0 then it is: 'period: DOY 100 to DOY 112, 1990'
C if IFDAY=1 then it is: 'period: 10 Jan to 31 Jan, 1990'
C if IFDAY=2 then it is: 'period: Mon 10 Jan to Mon 17 Jan, 1990'
C PERST2 (44 char) includes the time of day but not the year.
C IER=0 OK, IER=1 problem.
C BTIM and PETIM are in terms of decimal fractions of a day.
      SUBROUTINE EPERSTR(IYEAR,IBDOY,IBTIM,IEDOY,IETIM,NTSPH,
     &           IFDAY,IFTIME,PERST1,PERST2,PERST3,IER)
      CHARACTER PERST1*14,PERST2*44,PERST3*44


C EGETW gets first WORD after position K from the STRING of
C characters. Words are separated by blanks, commas, |, or tab: WORD,WORD,WORD
C or WORD WORD WORD or WORD, WORD, WORD  are all valid.  Provides a warning
C message if ACT='W', a failure message if ACT='F' and does
C no message if ACT='-'.  Modified after:
C G.N. Walton, US Nat. Institute of Standards and Technology
C     LS     - maximum length of STRING
C     L      - current position in WORD
C     LW     - maximum length of WORD
      SUBROUTINE EGETW(STRING,K,WORD,ACT,MSG,IER)
      CHARACTER*(*) WORD, STRING, MSG
      CHARACTER ACT*1


C EGETP gets first PHRASE after position K from the STRING of
C characters. Phrases are separated by tabs or commas. Provides a warning
C message if ACT='W', a failure message if ACT='F' and does
C no message if ACT='-'.
      SUBROUTINE EGETP(STRING,K,PHRASE,ACT,MSG,ier)
      CHARACTER*(*) PHRASE, STRING, MSG
      CHARACTER ACT*1


C EGETDQ gets first quoted PHRASE after position K from the STRING of
C characters. Phrases can contain spaces and commas but not tabs.
C Provides a warning message if ACT='W', a failure message if ACT='F' and
C no message if ACT='-'.  The string returned has the quotes removed.
C Note it uses an internal string buffer which assumes that the
C phrase is less than 248 characters long.
      SUBROUTINE EGETDQ(STRING,K,PHRASE,ACT,MSG,ier)
      CHARACTER*(*) PHRASE, STRING, MSG
      CHARACTER ACT*1


C EGETWI gets first word after position K from the STRING of
C characters and converts it into an integer IV, tests it against
C the minimum MN and the maximum MX and provides a warning
C message if ACT='W', a failure message if ACT='F' and does
C no range checking if ACT='-'. Words may be separated by blanks,
C commas, or tab: WORD,WORD,WORD or WORD WORD WORD or WORD, WORD, WORD
C are all valid.
      SUBROUTINE EGETWI(STRING,K,IV,MN,MX,ACT,MSG,IER)
      CHARACTER*(*) STRING, MSG
      CHARACTER ACT*1


C EGETWR gets first word after position K from the STRING of
C characters and converts it into a real number RV, tests it against
C the minimum RMN and the maximum RMX and provides a warning
C message if RACT='W', a failure message if RACT='F' and does
C no range checking if RACT='-'. Words may be separated by blanks,
C commas, or tab: WORD,WORD,WORD or WORD WORD WORD or WORD, WORD, WORD
C are all valid.
      SUBROUTINE EGETWR(STRING,K,RV,RMN,RMX,RACT,MSG,IER)
      CHARACTER*(*) STRING, MSG
      CHARACTER RACT*1


C EGETWRA recovers (IRVA) reals of real array (RVA) from an ASCII file
C (unit IAF) reading as many lines as necessary to recover the data.
C IER=2 if EOF is reached before INUM items have been parsed. IER=1 if
C there was a problem reading it. Each value is tested against
C the minimum RMN and the maximum RMX and provides a warning
C message if RACT='W', a failure message if RACT='F' and does
C no range checking if RACT='-'. Words may be separated by blanks,
C commas, or tab: WORD,WORD,WORD or WORD WORD WORD or WORD, WORD, WORD
C are all valid.
C Note: all reads are able to accept commented files.
      SUBROUTINE EGETWRA(IAF,RVA,IRVA,RMN,RMX,RACT,MSG,IER)
      DIMENSION RVA(*)
      CHARACTER*(*) MSG
      CHARACTER RACT*1


C EGETWIA recovers (IRVA) integers of integer array (IVA) from an
C ASCII file (unit IAF) reading as many lines as necessary to
C recover the data.
C IER=2 if EOF is reached before IRVA items have been parsed. IER=1 if
C there was a problem reading it. Each value is tested against
C the minimum IRMN and the maximum IRMX and provides a warning
C message if IACT='W', a failure message if IACT='F' and does
C no range checking if IACT='-'. Words may be separated by blanks,
C commas, or tab: WORD,WORD,WORD or WORD WORD WORD or WORD, WORD, WORD
C are all valid.
C Note: all reads are able to accept commented files.
      SUBROUTINE EGETWIA(IAF,IVA,IRVA,IRMN,IRMX,IACT,MSG,IER)
      DIMENSION IVA(*)
      CHARACTER*(*) MSG
      CHARACTER IACT*1


C EGETAGWIA recovers (IRVA) integers of integer array (IVA) from a string
C TSTR (from position K) and if TSTR does not hold all of the array then
C it continues reading from an ASCII file (unit IAF) reading as
C many lines as necessary to recover the data.
C IER=2 if EOF is reached before IRVA items have been parsed. IER=1 if
C there was a problem reading it. Each value is tested against
C the minimum IRMN and the maximum IRMX and provides a warning
C message if IACT='W', a failure message if IACT='F' and does
C no range checking if IACT='-'. Words may be separated by blanks,
C commas, or tab: WORD,WORD,WORD or WORD WORD WORD or WORD, WORD, WORD
C are all valid.
C Note: all reads are able to accept commented files.
      SUBROUTINE EGETAGWIA(TSTR,K,IAF,IRVA,IVA,IRMN,IRMX,IACT,MSG,IER)
      DIMENSION IVA(*)
      CHARACTER*(*) TSTR,MSG
      CHARACTER IACT*1


C EGETAGWRA recovers (IRVA) reals of real array (RVA) from a string
C TSTR (from position K) and if TSTR does not hold all of the array then
C it continues reading from an ASCII file (unit IAF) reading as
C many lines as necessary to recover the data.
C IER=2 if EOF is reached before IRVA items have been parsed. IER=1 if
C there was a problem reading it. Each value is tested against
C the minimum RMN and the maximum RMX and provides a warning
C message if IACT='W', a failure message if IACT='F' and does
C no range checking if RACT='-'. Words may be separated by blanks,
C commas, or tab: WORD,WORD,WORD or WORD WORD WORD or WORD, WORD, WORD
C are all valid.
C Note: all reads are able to accept commented files.
      SUBROUTINE EGETAGWRA(TSTR,K,IAF,IRVA,RVA,RMN,RMX,RACT,MSG,IER)
      DIMENSION RVA(*)
      CHARACTER*(*) TSTR,MSG
      CHARACTER RACT*1


C EGETAGWSA recovers (ISVA) words into string array (SVA) from a string
C TSTR (from position K) and if TSTR does not hold all of the array then
C it continues reading from an ASCII file (unit IAF) reading as
C many lines as necessary to recover the data

C The string array SVN is an array of inisz words assumed to be less than
C or equal to *32 characters (that is the size of the buffer). This 
C will work with space or comma or tab separations.

C IER=2 if EOF is reached before ISVA items have been parsed. IER=1 if
C there was a problem reading it. Each value is tested against
C a blank stringt and provides a warning message if SACT='W', a failure
C message if SACT='F' and does no blank checking if SACT='-'.
C Phrases may be separated by spaces commas, or tab: word,word,word or
C word, word, word, or word<tab>word<tab>word are all valid.
C Note: all reads are able to accept commented files.
      SUBROUTINE EGETAGWSA(TSTR,K,IAF,ISVA,SVA,inisz,SACT,MSG,IER)
      dimension SVA(inisz)
      CHARACTER*(*) SVA
      CHARACTER*(*) TSTR,MSG
      CHARACTER SACT*1


C EGETAGWPA recovers (ISVA) phrases into string array (SVA) from a string
C TSTR (from position K) and if TSTR does not hold all of the array then
C it continues reading from an ASCII file (unit IAF) reading as
C many lines as necessary to recover the data

C The string array SVN is an array of inisz items assumed to be less than
C or equal to *32 characters (that is the size of the buffer). This is
C flexible enough to work with phrases (and so it requires comma or
C tab separation in the file).

C IER=2 if EOF is reached before ISVA items have been parsed. IER=1 if
C there was a problem reading it. Each value is tested against
C a blank stringt and provides a warning message if SACT='W', a failure
C message if SACT='F' and does no blank checking if SACT='-'.
C Phrases may be separated by commas, or tab: phrase,phrase,phrase or
C phrase, phrase, phrase, or phrase<tab>phrase<tab>phrase are all valid.
C Note: all reads are able to accept commented files.
      SUBROUTINE EGETAGWPA(TSTR,K,IAF,ISVA,SVA,inisz,SACT,MSG,IER)
      dimension SVA(inisz)
      CHARACTER*(*) SVA
      CHARACTER*(*) TSTR,MSG
      CHARACTER SACT*1


C EGETRM returns the remainder of a text string TSTR after position k
C in RSTR where RSTR has no leading blanks.
      SUBROUTINE EGETRM(TSTR,K,RSTR,ACT,MSG,IER)
      CHARACTER*(*) TSTR,RSTR,MSG
      character ACT*1


C Find if module is being used as a dll (silent running).
      subroutine isadll(yes)
      logical yes


C Find if machine is unix.
C NOTE: uses compiler variable -DMINGW to signal .false.
      subroutine isunix(yes)
      logical yes


C usrhome: Find users home directory.
      subroutine usrhome(upath)
      COMMON/OUTIN/IUOUT,IUIN
      character*(*) upath


C usrname: Find users name.
      subroutine usrname(uname)
      character*(*) uname


C usrdir: Find current folder.
      subroutine usrdir(upwd)
      character*(*) upwd


C esppid: Find current process number.
      subroutine esppid(ipid)
      integer getpid


C tstamp: generates a time-stamped message.
C act (char*1) = '-' Current time, = 'm' Message plus time
C  = '>' append message to journal
      subroutine tstamp(act,msg)
      character*(*) msg
      character act*1


C ectime function as fixed length character*24 based on the
C the passed value of ictime
      character*24 FUNCTION ECTIME(ICTIME)
      integer ICTIME


C dstamp: Get date stamp in the form: Fri Jan 23 09:34:31 1998.
C Used to isolate code from system details.
      subroutine dstamp(date_str)
      character date_str*24


C comparedate is passed two date strings (generated by call to dstamp).
C act is requested action '?' is ??
C dif is positive if datea is more current than dateb.
      subroutine comparedate(datea,dateb,act,idif)
      character datea*24,dateb*24,act*1


C getsecs: Used to isolate fortran code from system specifics.
C Edit for machine type.
      subroutine getsecs(ictime)


C runit: Execute a command string, in text (runs in a new xterm) or graphics
C mode.  Assumes that command string terminates in a '&' if the
C user wishes to run in background mode. For minGW xterm is not used.
      subroutine runit(cmd,tg)
      character*(*) cmd,tg


C iEGetArrW reads all of the words in a 248 character string, and populates a character
C array with each word. Words are separated by blanks, commas, or tab: WORD,WORD,WORD
C or WORD WORD WORD or WORD, WORD, WORD  are all valid.
      integer function iEGetArrW(cString,cWORDS)
      character*248 cString, cWords(124)


C sitell2s takes latitude (clat) and longitude difference (clong) and returns
C descriptive string (descr).
      subroutine sitell2s(clat,clong,descr)
      character descr*16


C SIGFIG returns number to required significant figure level.
C R - real number
C NSIG - number of significant figures required.
C RNO - real number to NSIG figures
C STR - string version of RNO
C LSTR - length of STR
       subroutine sigfig(R,NSIG,RNO,STR,LSTR)
       character*12 STR


C SIpre returns suitable SI prefix for number supplied.  NOTE that
C   it is assumed that the value is supplied in the base SI unit, for
C   example supply a flux in W not kW.
C R - real number
C NSIG - number of significant figures required.
C RNO - real number to NSIG figures, including prefix
C STR - string version of RNO
C LSTR - length of STR
C PRE - prefix
C SYM - symbol
       subroutine SIpre(R,NSIG,RNO,STR,LSTR,PRE,SYM)
       character*12 STR
       character SYM*1
       character PRE*5


C pronam returns the characters of a string after the last
C occurrence of '/' or '\'
      SUBROUTINE PRONAM(longstr,last)
      CHARACTER*(*) LONGSTR,LAST


C DNOTZERO returns a non zero value with the same sign.
      DOUBLE PRECISION FUNCTION DNOTZERO(A)
      double precision A


C ANOTZERO returns a non zero value with the same sign.
      REAL FUNCTION ANOTZERO(A)


C ASKTIM is a standard call to enquire which month and day and time
C (point in time for snapshot analysis. Returns IMO (month), IDO (day
C of month), IJDAY (day of year for output), TIME (real representation),
C IT (timestep). IFDAY is a toggle provided in setres.f to control
C the display and input of periods - 0 = julian day, 1 or 2 = day of
C month.
      SUBROUTINE ASKTIM(IFDAY,NTS,IMO,IDO,IJDAY,TIME,IT,IER)


C LISTAS: General read of an ascii file.
      SUBROUTINE LISTAS(iunit,LFIL,IER)
      character LFIL*72


C SHOWMEH extracts additional help text matching the key OTHER from
C an external file (LTUT) and returns it in exh along with the
C number of lines (nhi) and their maximum width (ihw).
      SUBROUTINE SHOWMEH(IFTUT,LTUT,OTHER,nhi,ihw,exh,IER)
      dimension exh(60)
      CHARACTER*(*) OTHER
      CHARACTER exh*72,ltut*72


C SDELIM replaces blanks in a string A with alternative delimiter and
C returns in B. If the last character in the string is the alternative
C delimiter then replace it with a blank.
      SUBROUTINE SDELIM(A,B,delm,IW)
      CHARACTER*(*) A,B
      CHARACTER delm*1


C EDDISP is a generic routine which displays lines of text passed to it
C in a format depending on the terminal type and the currently set
C delimiter:
      SUBROUTINE EDDISP(ITRU,MSG)
      CHARACTER*(*) MSG


C EDISP248 displays a 248 char block of text passed to it
C in a format depending on the terminal type. If it will not
C fit on one line, subsequent lines are used and breaks are
C set based on nearest width to iwid.
      SUBROUTINE EDISP248(ITRU,MSG,iwid)
      CHARACTER*(*) MSG


C clrtextbuf clears the text buffer common blocks.
      subroutine clrtextbuf()


C UPDVIEW is called from C code in esru_x.c or esp-r.c with values to 
C update common blocks GFONT, VIEWPX and SPAD. Set REFRESH=true.
C Set MODIFY=true to force any wire-frame images to be redrawn.
      subroutine updview(ifsc,itfsc,imfsc,ilc,irc,itc,ibc,iwc,ihc,lttyc)
      integer ifs,itfs,imfs


C WIREPK is called from C code in esru_x.c or esp-r.c  with current
C number of zones which have been selected for display.
C Compilation of X11 or GTK version assumes this will be available in
C each modules code somewhere.  If not needed then provide a dummy.
      subroutine wirepk(inpk)


C EPROMPT: Does nothing, for compatibility only.
      SUBROUTINE EPROMPT

.ES
.sp
